{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      game: {\n        title: '',\n        genre: '',\n        description: '',\n        releaseDate: ''\n      }\n    };\n  },\n  created() {\n    this.fetchGame();\n  },\n  methods: {\n    async fetchGame() {\n      try {\n        const response = await fetch(`http://localhost:3000/games/${this.$route.params.id}`);\n        this.game = await response.json();\n        this.game.releaseDate = this.game.releaseDate.slice(0, 10); // Formater la date\n      } catch (error) {\n        console.error('Erreur lors de la récupération du jeu :', error);\n      }\n    },\n    async updateGame() {\n      // Vérification des données avant de les envoyer\n      console.log('Données envoyées pour modification :', this.game);\n\n      // Optionnel : formater la date si nécessaire\n      const gameData = {\n        ...this.game,\n        releaseDate: new Date(this.game.releaseDate).toISOString() // Formater correctement la date\n      };\n      try {\n        const response = await fetch(`http://localhost:3000/games/${this.$route.params.id}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(gameData) // Envoyer les données formatées\n        });\n        if (!response.ok) {\n          throw new Error(`Erreur lors de la modification du jeu : ${response.statusText}`);\n        }\n        console.log('Jeu modifié avec succès');\n        this.$router.push('/'); // Rediriger vers la liste des jeux après la modification\n      } catch (error) {\n        console.error('Erreur lors de la modification du jeu :', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","game","title","genre","description","releaseDate","created","fetchGame","methods","response","fetch","$route","params","id","json","slice","error","console","updateGame","log","gameData","Date","toISOString","method","headers","body","JSON","stringify","ok","Error","statusText","$router","push"],"sources":["/Users/lucaslabeye/Documents/EFREI/steam-library/steam-library-frontend/src/components/EditGame.vue"],"sourcesContent":["<template>\n    <div>\n      <h1>Modifier un Jeu</h1>\n      <form @submit.prevent=\"updateGame\">\n        <div>\n          <label>Titre du Jeu:</label>\n          <input v-model=\"game.title\" required />\n        </div>\n        <div>\n          <label>Genre:</label>\n          <input v-model=\"game.genre\" required />\n        </div>\n        <div>\n          <label>Description:</label>\n          <textarea v-model=\"game.description\"></textarea>\n        </div>\n        <div>\n          <label>Date de Sortie:</label>\n          <input v-model=\"game.releaseDate\" type=\"date\" required />\n        </div>\n        <button type=\"submit\">Modifier</button>\n        <button type=\"button\" @click=\"goBack\">Retour</button>\n      </form>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    data() {\n      return {\n        game: {\n          title: '',\n          genre: '',\n          description: '',\n          releaseDate: ''\n        }\n      };\n    },\n    created() {\n      this.fetchGame();\n    },\n    methods: {\n      async fetchGame() {\n        try {\n          const response = await fetch(`http://localhost:3000/games/${this.$route.params.id}`);\n          this.game = await response.json();\n          this.game.releaseDate = this.game.releaseDate.slice(0, 10); // Formater la date\n        } catch (error) {\n          console.error('Erreur lors de la récupération du jeu :', error);\n        }\n      },\n      async updateGame() {\n  // Vérification des données avant de les envoyer\n  console.log('Données envoyées pour modification :', this.game);\n\n  // Optionnel : formater la date si nécessaire\n  const gameData = {\n    ...this.game,\n    releaseDate: new Date(this.game.releaseDate).toISOString(),  // Formater correctement la date\n  };\n\n  try {\n    const response = await fetch(`http://localhost:3000/games/${this.$route.params.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(gameData)  // Envoyer les données formatées\n    });\n\n    if (!response.ok) {\n      throw new Error(`Erreur lors de la modification du jeu : ${response.statusText}`);\n    }\n\n    console.log('Jeu modifié avec succès');\n    this.$router.push('/'); // Rediriger vers la liste des jeux après la modification\n  } catch (error) {\n    console.error('Erreur lors de la modification du jeu :', error);\n  }\n}\n\n    }\n  };\n  </script>\n  "],"mappings":";AA2BE,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE;QACJC,KAAK,EAAE,EAAE;QACTC,KAAK,EAAE,EAAE;QACTC,WAAW,EAAE,EAAE;QACfC,WAAW,EAAE;MACf;IACF,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,SAAS,CAAC,CAAC;EAClB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,SAASA,CAAA,EAAG;MAChB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMC,KAAK,CAAC,+BAA+B,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE,EAAE,CAAC;QACpF,IAAI,CAACZ,IAAG,GAAI,MAAMQ,QAAQ,CAACK,IAAI,CAAC,CAAC;QACjC,IAAI,CAACb,IAAI,CAACI,WAAU,GAAI,IAAI,CAACJ,IAAI,CAACI,WAAW,CAACU,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;MAC9D,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MACjE;IACF,CAAC;IACD,MAAME,UAAUA,CAAA,EAAG;MACvB;MACAD,OAAO,CAACE,GAAG,CAAC,sCAAsC,EAAE,IAAI,CAAClB,IAAI,CAAC;;MAE9D;MACA,MAAMmB,QAAO,GAAI;QACf,GAAG,IAAI,CAACnB,IAAI;QACZI,WAAW,EAAE,IAAIgB,IAAI,CAAC,IAAI,CAACpB,IAAI,CAACI,WAAW,CAAC,CAACiB,WAAW,CAAC,CAAC,CAAG;MAC/D,CAAC;MAED,IAAI;QACF,MAAMb,QAAO,GAAI,MAAMC,KAAK,CAAC,+BAA+B,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE,EAAE,EAAE;UACnFU,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,EAAG;QAClC,CAAC,CAAC;QAEF,IAAI,CAACX,QAAQ,CAACmB,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,2CAA2CpB,QAAQ,CAACqB,UAAU,EAAE,CAAC;QACnF;QAEAb,OAAO,CAACE,GAAG,CAAC,yBAAyB,CAAC;QACtC,IAAI,CAACY,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC,EAAE;MAC1B,EAAE,OAAOhB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MACjE;IACF;EAEI;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}